generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exchange {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report      report[]
  risk_limit  risk_limit[]
  stock       stock[]
}

model report {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  exchange_id String?   @db.Uuid
  report_data String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  exchange    exchange? @relation(fields: [exchange_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model risk_limit {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  exchange_id String?   @db.Uuid
  limit_value Int
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  exchange    exchange? @relation(fields: [exchange_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stock {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  symbol      String    @db.VarChar(255)
  exchange_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  exchange    exchange? @relation(fields: [exchange_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trade       trade[]
}

model trade {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stock_id   String?  @db.Uuid
  user_id    String?  @db.Uuid
  quantity   Int
  price      Int
  trade_type String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  stock      stock?   @relation(fields: [stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  exchange    exchange[]
  report      report[]
  risk_limit  risk_limit[]
  trade       trade[]
}
